/* pgmp -- Module installation SQL script
 *
 * Copyright (C) 2011 Daniele Varrazzo
 *
 * This file is part of the PostgreSQL GMP Module
 *
 * The PostgreSQL GMP Module is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 *
 * The PostgreSQL GMP Module is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the PostgreSQL GMP Module.  If not, see
 * http://www.gnu.org/licenses/.
 */


-- Adjust this setting to control where the objects get created.
SET search_path = public;


--
-- mpz user-defined type
--

CREATE OR REPLACE FUNCTION mpz_in(cstring)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_in'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION mpz_out(mpz)
RETURNS cstring
AS 'MODULE_PATHNAME', 'pmpz_out'
LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE mpz (
      INPUT = mpz_in
    , OUTPUT = mpz_out
    , INTERNALLENGTH = VARIABLE
    , STORAGE = EXTENDED
    , CATEGORY = 'N'
);


-- Other I/O functions

CREATE OR REPLACE FUNCTION mpz(text, int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_in_base'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION text(mpz, int4)
RETURNS cstring
AS 'MODULE_PATHNAME', 'pmpz_out_base'
LANGUAGE C IMMUTABLE STRICT;


--
-- mpz cast
--

CREATE OR REPLACE FUNCTION mpz_from_int2(int2)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_from_int2'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (int2 AS mpz)
WITH FUNCTION mpz_from_int2(int2)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION mpz_from_int4(int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_from_int4'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (int4 AS mpz)
WITH FUNCTION mpz_from_int4(int4)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION mpz_from_int8(int8)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_from_int8'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (int8 AS mpz)
WITH FUNCTION mpz_from_int8(int8)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION mpz_to_int8(mpz)
RETURNS int8
AS 'MODULE_PATHNAME', 'pmpz_to_int8'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (mpz AS int8)
WITH FUNCTION mpz_to_int8(mpz)
AS ASSIGNMENT;


CREATE OR REPLACE FUNCTION mpz_to_int4(mpz)
RETURNS int4
AS 'MODULE_PATHNAME', 'pmpz_to_int4'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (mpz AS int4)
WITH FUNCTION mpz_to_int4(mpz)
AS ASSIGNMENT;


CREATE OR REPLACE FUNCTION mpz_to_int2(mpz)
RETURNS int2
AS 'MODULE_PATHNAME', 'pmpz_to_int2'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (mpz AS int2)
WITH FUNCTION mpz_to_int2(mpz)
AS ASSIGNMENT;


-- TODO: stub - only good for ints
CREATE CAST (numeric AS mpz)
WITH INOUT
AS IMPLICIT;


--
-- mpz operators
--

CREATE OR REPLACE FUNCTION mpz_uminus(mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_uminus'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR - (
	RIGHTARG = mpz,
	PROCEDURE = mpz_uminus
);


CREATE OR REPLACE FUNCTION mpz_uplus(mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_uplus'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR + (
	RIGHTARG = mpz,
	PROCEDURE = mpz_uplus
);


CREATE OR REPLACE FUNCTION mpz_add(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_add'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR + (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	COMMUTATOR = +,
	PROCEDURE = mpz_add
);


CREATE OR REPLACE FUNCTION mpz_sub(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_sub'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR - (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = mpz_sub
);


CREATE OR REPLACE FUNCTION mpz_mul(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_mul'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR * (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	COMMUTATOR = *,
	PROCEDURE = mpz_mul
);


CREATE OR REPLACE FUNCTION mpz_tdiv_q(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_tdiv_q'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR / (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = mpz_tdiv_q
);


CREATE OR REPLACE FUNCTION mpz_tdiv_r(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_tdiv_r'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR % (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = mpz_tdiv_r
);


CREATE OR REPLACE FUNCTION mpz_cdiv_q(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_cdiv_q'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR +/ (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = mpz_cdiv_q
);


CREATE OR REPLACE FUNCTION mpz_cdiv_r(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_cdiv_r'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR +% (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = mpz_cdiv_r
);


CREATE OR REPLACE FUNCTION mpz_fdiv_q(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_fdiv_q'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR -/ (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = mpz_fdiv_q
);


CREATE OR REPLACE FUNCTION mpz_fdiv_r(mpz, mpz)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_fdiv_r'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR -% (
	LEFTARG = mpz,
	RIGHTARG = mpz,
	PROCEDURE = mpz_fdiv_r
);


CREATE OR REPLACE FUNCTION mpz_mul_2exp(mpz, int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_mul_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR << (
	LEFTARG = mpz,
	RIGHTARG = int4,
	PROCEDURE = mpz_mul_2exp
);


CREATE OR REPLACE FUNCTION mpz_tdiv_q_2exp(mpz, int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_tdiv_q_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR >> (
	LEFTARG = mpz,
	RIGHTARG = int4,
	PROCEDURE = mpz_tdiv_q_2exp
);


CREATE OR REPLACE FUNCTION mpz_tdiv_r_2exp(mpz, int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_tdiv_r_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR %>> (
	LEFTARG = mpz,
	RIGHTARG = int4,
	PROCEDURE = mpz_tdiv_r_2exp
);


CREATE OR REPLACE FUNCTION mpz_cdiv_q_2exp(mpz, int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_cdiv_q_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR +>> (
	LEFTARG = mpz,
	RIGHTARG = int4,
	PROCEDURE = mpz_cdiv_q_2exp
);


CREATE OR REPLACE FUNCTION mpz_cdiv_r_2exp(mpz, int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_cdiv_r_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR +%>> (
	LEFTARG = mpz,
	RIGHTARG = int4,
	PROCEDURE = mpz_cdiv_r_2exp
);


CREATE OR REPLACE FUNCTION mpz_fdiv_q_2exp(mpz, int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_fdiv_q_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR ->> (
	LEFTARG = mpz,
	RIGHTARG = int4,
	PROCEDURE = mpz_fdiv_q_2exp
);


CREATE OR REPLACE FUNCTION mpz_fdiv_r_2exp(mpz, int4)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpz_fdiv_r_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR -%>> (
	LEFTARG = mpz,
	RIGHTARG = int4,
	PROCEDURE = mpz_fdiv_r_2exp
);


--
-- mpz comparisons
--

CREATE OR REPLACE FUNCTION mpz_eq(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME', 'pmpz_eq'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR = (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = mpz_eq
    , COMMUTATOR = =
    , NEGATOR = <>
    , RESTRICT = eqsel
    , JOIN = eqjoinsel
    , HASHES
    , MERGES
);

CREATE OR REPLACE FUNCTION mpz_ne(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME', 'pmpz_ne'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR <> (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = mpz_ne
    , COMMUTATOR = <>
    , NEGATOR = =
    , RESTRICT = neqsel
    , JOIN = neqjoinsel
);

CREATE OR REPLACE FUNCTION mpz_gt(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME', 'pmpz_gt'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR > (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = mpz_gt
    , COMMUTATOR = <
    , NEGATOR = <=
    , RESTRICT = scalargtsel
    , JOIN = scalargtjoinsel
);

CREATE OR REPLACE FUNCTION mpz_ge(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME', 'pmpz_ge'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR >= (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = mpz_ge
    , COMMUTATOR = <=
    , NEGATOR = <
    , RESTRICT = scalargtsel
    , JOIN = scalargtjoinsel
);

CREATE OR REPLACE FUNCTION mpz_lt(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME', 'pmpz_lt'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR < (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = mpz_lt
    , COMMUTATOR = >
    , NEGATOR = >=
    , RESTRICT = scalarltsel
    , JOIN = scalarltjoinsel
);

CREATE OR REPLACE FUNCTION mpz_le(mpz, mpz)
RETURNS boolean
AS 'MODULE_PATHNAME', 'pmpz_le'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR <= (
	LEFTARG = mpz
	, RIGHTARG = mpz
	, PROCEDURE = mpz_le
    , COMMUTATOR = >=
    , NEGATOR = >
    , RESTRICT = scalarltsel
    , JOIN = scalarltjoinsel
);


--
-- mpz indexes
--

CREATE OR REPLACE FUNCTION mpz_cmp(mpz, mpz)
RETURNS integer
AS 'MODULE_PATHNAME', 'pmpz_cmp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR CLASS mpz_btree_ops
DEFAULT FOR TYPE mpz USING btree AS
    OPERATOR    1   <   ,
    OPERATOR    2   <=  ,
    OPERATOR    3   =   ,
    OPERATOR    4   >=  ,
    OPERATOR    5   >   ,
    FUNCTION    1   mpz_cmp(mpz, mpz)
    ;

-- TODO: OPERATOR FAMILY?


--
-- Aggregation functions
--

CREATE OR REPLACE FUNCTION mpza_in(cstring)
RETURNS _mpza
AS 'MODULE_PATHNAME', 'pmpza_in'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION mpza_out(_mpza)
RETURNS cstring
AS 'MODULE_PATHNAME', 'pmpza_out'
LANGUAGE C IMMUTABLE STRICT;

-- TODO: this type should be marked as "non-storable"
CREATE TYPE _mpza (
      INPUT = mpza_in
    , OUTPUT = mpza_out
    -- 12 is ok on 32 bit, but probably uninfluent anyway
    -- as we never store this type
    , INTERNALLENGTH = 16
);


CREATE OR REPLACE FUNCTION _mpz_from_mpza(_mpza)
RETURNS mpz
AS 'MODULE_PATHNAME', '_pmpz_from_pmpza'
LANGUAGE C STRICT IMMUTABLE;

CREATE OR REPLACE FUNCTION _mpz_agg_add(_mpza, mpz)
RETURNS _mpza
AS 'MODULE_PATHNAME', '_pmpz_agg_add'
LANGUAGE C STRICT IMMUTABLE;

CREATE AGGREGATE sum (mpz)
(
      SFUNC = _mpz_agg_add
    , STYPE = _mpza
    , FINALFUNC = _mpz_from_mpza
    , INITCOND = ''
);

CREATE OR REPLACE FUNCTION _mpz_agg_mul(_mpza, mpz)
RETURNS _mpza
AS 'MODULE_PATHNAME', '_pmpz_agg_mul'
LANGUAGE C STRICT IMMUTABLE;

CREATE AGGREGATE prod (mpz)
(
      SFUNC = _mpz_agg_mul
    , STYPE = _mpza
    , FINALFUNC = _mpz_from_mpza
    , INITCOND = ''
);


--
-- Test functions
--

CREATE OR REPLACE FUNCTION mpz_test_dataset(int4, int4)
RETURNS SETOF mpz
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;

CREATE OR REPLACE FUNCTION numeric_test_dataset(int4, numeric)
RETURNS SETOF numeric
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;




--
-- mpq user-defined type
--

CREATE OR REPLACE FUNCTION mpq_in(cstring)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_in'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION mpq_out(mpq)
RETURNS cstring
AS 'MODULE_PATHNAME', 'pmpq_out'
LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE mpq (
      INPUT = mpq_in
    , OUTPUT = mpq_out
    , INTERNALLENGTH = VARIABLE
    , STORAGE = EXTENDED
    , CATEGORY = 'N'
);


CREATE OR REPLACE FUNCTION mpq(mpz, mpz)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_mpz_mpz'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION mpq(int4, int4)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_int4_int4'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION num(mpq)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpq_num'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION den(mpq)
RETURNS mpz
AS 'MODULE_PATHNAME', 'pmpq_den'
LANGUAGE C IMMUTABLE STRICT;


CREATE OR REPLACE FUNCTION mpq_from_int2(int2)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_from_int2'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (int2 AS mpq)
WITH FUNCTION mpq_from_int2(int2)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION mpq_from_int4(int4)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_from_int4'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (int4 AS mpq)
WITH FUNCTION mpq_from_int4(int4)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION mpq_from_int8(int8)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_from_int8'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (int8 AS mpq)
WITH FUNCTION mpq_from_int8(int8)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION mpq_from_numeric(numeric)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_from_numeric'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (numeric AS mpq)
WITH FUNCTION mpq_from_numeric(numeric)
AS IMPLICIT;


CREATE OR REPLACE FUNCTION mpq_from_mpz(mpz)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_from_mpz'
LANGUAGE C IMMUTABLE STRICT;

CREATE CAST (mpz AS mpq)
WITH FUNCTION mpq_from_mpz(mpz)
AS IMPLICIT;


--
-- mpq operators
--

CREATE OR REPLACE FUNCTION mpq_uminus(mpq)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_uminus'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR - (
	RIGHTARG = mpq,
	PROCEDURE = mpq_uminus
);


CREATE OR REPLACE FUNCTION mpq_uplus(mpq)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_uplus'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR + (
	RIGHTARG = mpq,
	PROCEDURE = mpq_uplus
);


CREATE OR REPLACE FUNCTION mpq_add(mpq, mpq)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_add'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR + (
	LEFTARG = mpq,
	RIGHTARG = mpq,
	COMMUTATOR = +,
	PROCEDURE = mpq_add
);


CREATE OR REPLACE FUNCTION mpq_sub(mpq, mpq)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_sub'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR - (
	LEFTARG = mpq,
	RIGHTARG = mpq,
	PROCEDURE = mpq_sub
);


CREATE OR REPLACE FUNCTION mpq_mul(mpq, mpq)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_mul'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR * (
	LEFTARG = mpq,
	RIGHTARG = mpq,
	COMMUTATOR = *,
	PROCEDURE = mpq_mul
);


CREATE OR REPLACE FUNCTION mpq_div(mpq, mpq)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_div'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR / (
	LEFTARG = mpq,
	RIGHTARG = mpq,
	PROCEDURE = mpq_div
);


CREATE OR REPLACE FUNCTION mpq_mul_2exp(mpq, int4)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_mul_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR << (
	LEFTARG = mpq,
	RIGHTARG = int4,
	PROCEDURE = mpq_mul_2exp
);


CREATE OR REPLACE FUNCTION mpq_div_2exp(mpq, int4)
RETURNS mpq
AS 'MODULE_PATHNAME', 'pmpq_div_2exp'
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR >> (
	LEFTARG = mpq,
	RIGHTARG = int4,
	PROCEDURE = mpq_div_2exp
);



